{"version":3,"sources":["UserProfile.js","App.js","reportWebVitals.js","index.js"],"names":["UserProfile","user","setUser","useState","name","email","bio","isEditing","setIsEditing","handleChange","e","value","target","prevUser","_objectSpread","[object Object]","React","createElement","className","onSubmit","preventDefault","console","log","htmlFor","type","id","onChange","disabled","required","onClick","toggleEdit","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"8KAgGeA,MA3FKA,KAElB,MAAOC,EAAMC,GAAWC,mBAAS,CAC/BC,KAAM,GACNC,MAAO,GACPC,IAAK,MAGAC,EAAWC,GAAgBL,oBAAS,GAGrCM,EAAgBC,IACpB,MAAMN,KAAEA,EAAIO,MAAEA,GAAUD,EAAEE,OAC1BV,EAAQW,GAAQC,wBAAA,GACXD,GAAQ,IACXE,CAACX,GAAOO,MAgBZ,OACEK,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,2BACbF,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,UAAI,iBAEND,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,QAAME,SAbQT,IACpBA,EAAEU,iBACFC,QAAQC,IAAI,sBAAuBrB,GACnCO,GAAa,KAWLQ,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SAAOM,QAAQ,OAAOL,UAAU,cAAa,QAC7CF,IAAAC,cAAA,SACEO,KAAK,OACLN,UAAU,eACVO,GAAG,OACHrB,KAAK,OACLO,MAAOV,EAAKG,KACZsB,SAAUjB,EACVkB,UAAWpB,EACXqB,UAAQ,KAGZZ,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SAAOM,QAAQ,QAAQL,UAAU,cAAa,SAC9CF,IAAAC,cAAA,SACEO,KAAK,QACLN,UAAU,eACVO,GAAG,QACHrB,KAAK,QACLO,MAAOV,EAAKI,MACZqB,SAAUjB,EACVkB,UAAWpB,EACXqB,UAAQ,KAGZZ,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,SAAOM,QAAQ,MAAML,UAAU,cAAa,OAC5CF,IAAAC,cAAA,YACEC,UAAU,eACVO,GAAG,MACHrB,KAAK,MACLO,MAAOV,EAAKK,IACZoB,SAAUjB,EACVkB,UAAWpB,KAGfS,IAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,oBAAoBW,QAxD3CC,KACjBtB,GAAcD,KAwDHA,EAAY,SAAW,QAEzBA,GACCS,IAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,wBAAuB,aCzEtDa,MARHA,IAERf,IAAAC,cAAA,WACED,IAAAC,cAACjB,EAAW,OCKHgC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAzB,EAAA,GAAA0B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhC,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAACc,EAAG,QAORC","file":"static/js/main.6c24f3bd.chunk.js","sourcesContent":["// src/UserProfile.js\n\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst UserProfile = () => {\n  // State to manage user information\n  const [user, setUser] = useState({\n    name: '',\n    email: '',\n    bio: ''\n  });\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUser(prevUser => ({\n      ...prevUser,\n      [name]: value\n    }));\n  };\n\n  // Toggle editing mode\n  const toggleEdit = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Handle form submission (for demonstration, we'll just log the user data)\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Updated User Info: \", user);\n    setIsEditing(false); // Exit editing mode after submission\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"card text-white bg-dark\">\n        <div className=\"card-header\">\n          <h3>User Profile</h3>\n        </div>\n        <div className=\"card-body\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">Name</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"name\"\n                name=\"name\"\n                value={user.name}\n                onChange={handleChange}\n                disabled={!isEditing}\n                required\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"email\" className=\"form-label\">Email</label>\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"email\"\n                name=\"email\"\n                value={user.email}\n                onChange={handleChange}\n                disabled={!isEditing}\n                required\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"bio\" className=\"form-label\">Bio</label>\n              <textarea\n                className=\"form-control\"\n                id=\"bio\"\n                name=\"bio\"\n                value={user.bio}\n                onChange={handleChange}\n                disabled={!isEditing}\n              ></textarea>\n            </div>\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={toggleEdit}>\n              {isEditing ? 'Cancel' : 'Edit'}\n            </button>\n            {isEditing && (\n              <button type=\"submit\" className=\"btn btn-primary ms-2\">\n                Save\n              </button>\n            )}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;","\nimport React from 'react';\nimport UserProfile from './UserProfile';\n\nconst App = () => {\n  return (\n    <div>\n      <UserProfile />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}